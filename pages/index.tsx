import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { createContext, useEffect, useState } from "react";
import List from "../components/List";
import PopUp from "../components/Popup";
import styles from "../styles/Home.module.css";
import { Category } from "../types/ICategory";
import { Nominee } from "../types/INominee";
import { IVote } from "../types/IVote";

export const VoteContext = createContext<{
  showpopup: () => void;
  addVote: (nominee: string, category: string) => void;
  votes: IVote[];
}>({
  showpopup: () => {},
  addVote: (nominee: string, category: string) => {},
  votes: [],
});

const Home: NextPage = () => {
  const [awards, setAwards] = useState<{ items: Array<Category> }>();
  const [error, setError] = useState("");
  const [votes, setVotes] = useState<IVote[]>([]);
  const [showpopup, setShowPopup] = useState(false);
  const showPop = () => {
    setShowPopup(true);
  };
  useEffect(() => {
    fetch("/api/ballots")
      .then((res) => res.json())
      .then((json) => setTimeout(() => setAwards(json), 1000))
      .catch((err) => setError(err.message));
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Take Home Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {awards ? (
        <VoteContext.Provider
          value={{
            showpopup: showPop,
            votes,
            addVote: (nominee: string, category: string) => {
              const newVotes: Array<IVote> = [...votes];
              let search = newVotes.findIndex(
                (vote) => vote.category === category
              );
              if (search !== -1) newVotes[search].nominee = nominee;
              else newVotes.push({ category, nominee });
              setVotes(newVotes);
            },
          }}
        >
          <main className={styles.main}>
            <h4 className={styles.title}>Awards 2021</h4>
            <List categories={awards.items} />
            {showpopup && (
              <PopUp
                onClose={() => {
                  setShowPopup(false);
                  setVotes([]);
                }}
              />
            )}
          </main>
        </VoteContext.Provider>
      ) : (
        <h1>Loading ...</h1>
      )}
    </div>
  );
};

export default Home;
